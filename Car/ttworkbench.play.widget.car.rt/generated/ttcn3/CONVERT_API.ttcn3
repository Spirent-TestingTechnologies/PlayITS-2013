// generated by ProtoGenerator at Tue Feb 26 14:22:09 CET 2013 - do not edit!
module CONVERT_API {
  import from API all;
  import from PROTO_API language "PROTO" all;

  function fromProto_warning(template(omit) PROTO_API.warning.enum_value p_value)
    return template(omit) API.warning {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      select (p_value) {
        case (deer) { return deer; }
        case (rain) { return rain; }
        case (ice) { return ice; }
        case (accident) { return accident; }
        case (fog) { return fog; }
        case (snow) { return snow; }
      }
    }
  }

  function toProto_warning(template(omit) API.warning p_value)
    return template(omit) PROTO_API.warning.enum_value {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      select (p_value) {
        case (deer) { return deer; }
        case (rain) { return rain; }
        case (ice) { return ice; }
        case (accident) { return accident; }
        case (fog) { return fog; }
        case (snow) { return snow; }
      }
    }
  }

  function fromProto_gpsPosition(template(omit) PROTO_API.gpsPosition p_value)
    return template(omit) API.gpsPosition {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        latitude := p_value.latitude,
        longitude := p_value.longitude
      }
    }
  }

  function toProto_gpsPosition(template(omit) API.gpsPosition p_value)
    return template(omit) PROTO_API.gpsPosition {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        latitude := p_value.latitude,
        longitude := p_value.longitude
      }
    }
  }

  function fromProto_onOffEngineType(template(omit) PROTO_API.onOffEngineType p_value)
    return template(omit) API.onOffEngineType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        engineStatus := p_value.engineStatus
      }
    }
  }

  function toProto_onOffEngineType(template(omit) API.onOffEngineType p_value)
    return template(omit) PROTO_API.onOffEngineType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        engineStatus := p_value.engineStatus
      }
    }
  }

  function fromProto_speedType(template(omit) PROTO_API.speedType p_value)
    return template(omit) API.speedType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        speed := p_value.speed
      }
    }
  }

  function toProto_speedType(template(omit) API.speedType p_value)
    return template(omit) PROTO_API.speedType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        speed := p_value.speed
      }
    }
  }

  function fromProto_trackType(template(omit) PROTO_API.trackType p_value)
    return template(omit) API.trackType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        trackName := p_value.trackName
      }
    }
  }

  function toProto_trackType(template(omit) API.trackType p_value)
    return template(omit) PROTO_API.trackType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        trackName := p_value.trackName
      }
    }
  }

  function fromProto_warningType(template(omit) PROTO_API.warningType p_value)
    return template(omit) API.warningType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        warningName := CONVERT_API.fromProto_warning(p_value.warningName),
        gpsPos := CONVERT_API.fromProto_gpsPosition(p_value.gpsPos),
        priority := p_value.priority
      }
    }
  }

  function toProto_warningType(template(omit) API.warningType p_value)
    return template(omit) PROTO_API.warningType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        warningName := CONVERT_API.toProto_warning(p_value.warningName),
        gpsPos := CONVERT_API.toProto_gpsPosition(p_value.gpsPos),
        priority := p_value.priority
      }
    }
  }

  function fromProto_carStatusType(template(omit) PROTO_API.carStatusType p_value)
    return template(omit) API.carStatusType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        engineStatus := p_value.engineStatus,
        speed := p_value.speed,
        absSensor := p_value.absSensor,
        espSensor := p_value.espSensor,
        lightSensor := p_value.lightSensor,
        fogLightSensor := p_value.fogLightSensor,
        fuelFilling := p_value.fuelFilling,
        gpsPos := CONVERT_API.fromProto_gpsPosition(p_value.gpsPos),
        warning := CONVERT_API.fromProto_warningType(p_value.warning)
      }
    }
  }

  function toProto_carStatusType(template(omit) API.carStatusType p_value)
    return template(omit) PROTO_API.carStatusType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        engineStatus := p_value.engineStatus,
        speed := p_value.speed,
        absSensor := p_value.absSensor,
        espSensor := p_value.espSensor,
        lightSensor := p_value.lightSensor,
        fogLightSensor := p_value.fogLightSensor,
        fuelFilling := p_value.fuelFilling,
        gpsPos := CONVERT_API.toProto_gpsPosition(p_value.gpsPos),
        warning := CONVERT_API.toProto_warningType(p_value.warning)
      }
    }
  }
}