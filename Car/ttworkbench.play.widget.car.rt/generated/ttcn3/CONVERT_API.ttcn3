// generated by ProtoGenerator at Wed Feb 20 14:08:22 CET 2013 - do not edit!
module CONVERT_API {
  import from API all;
  import from PROTO_API language "PROTO" all;

  function fromProto_onOffEngineType(template(omit) PROTO_API.onOffEngineType p_value)
    return template(omit) API.onOffEngineType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        engineStatus := p_value.engineStatus
      }
    }
  }

  function toProto_onOffEngineType(template(omit) API.onOffEngineType p_value)
    return template(omit) PROTO_API.onOffEngineType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        engineStatus := p_value.engineStatus
      }
    }
  }

  function fromProto_speedType(template(omit) PROTO_API.speedType p_value)
    return template(omit) API.speedType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        speed := p_value.speed
      }
    }
  }

  function toProto_speedType(template(omit) API.speedType p_value)
    return template(omit) PROTO_API.speedType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        speed := p_value.speed
      }
    }
  }

  function fromProto_trackNumberType(template(omit) PROTO_API.trackNumberType p_value)
    return template(omit) API.trackNumberType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        track := CONVERT_API.fromProto_trackNumberType__track(p_value.track)
      }
    }
  }

  function toProto_trackNumberType(template(omit) API.trackNumberType p_value)
    return template(omit) PROTO_API.trackNumberType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        track := CONVERT_API.toProto_trackNumberType__track(p_value.track)
      }
    }
  }

  function fromProto_trackNumberType__track(template(omit) PROTO_API.trackNumberType.track p_value)
    return template(omit) API.trackNumberType.track {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var API.trackNumberType.track v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function toProto_trackNumberType__track(template(omit) API.trackNumberType.track p_value)
    return template(omit) PROTO_API.trackNumberType.track {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var PROTO_API.trackNumberType.track v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function fromProto_warningType(template(omit) PROTO_API.warningType p_value)
    return template(omit) API.warningType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        warning := CONVERT_API.fromProto_warningType__warning(p_value.warning)
      }
    }
  }

  function toProto_warningType(template(omit) API.warningType p_value)
    return template(omit) PROTO_API.warningType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        warning := CONVERT_API.toProto_warningType__warning(p_value.warning)
      }
    }
  }

  function fromProto_warningType__warning(template(omit) PROTO_API.warningType.warning p_value)
    return template(omit) API.warningType.warning {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var API.warningType.warning v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function toProto_warningType__warning(template(omit) API.warningType.warning p_value)
    return template(omit) PROTO_API.warningType.warning {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var PROTO_API.warningType.warning v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function fromProto_carStatusType(template(omit) PROTO_API.carStatusType p_value)
    return template(omit) API.carStatusType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        engineStatus := p_value.engineStatus,
        speed := p_value.speed,
        track := p_value.track,
        warning := p_value.warning
      }
    }
  }

  function toProto_carStatusType(template(omit) API.carStatusType p_value)
    return template(omit) PROTO_API.carStatusType {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        engineStatus := p_value.engineStatus,
        speed := p_value.speed,
        track := p_value.track,
        warning := p_value.warning
      }
    }
  }
}