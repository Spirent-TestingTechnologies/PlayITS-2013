// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PROTO_SUTAPI.proto

package com.testingtech.ttworkbench.play.generated;

public final class PROTO_SUTAPI {
  private PROTO_SUTAPI() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface carInitTypeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required bool absSensorExists = 1;
    boolean hasAbsSensorExists();
    boolean getAbsSensorExists();
    
    // required bool espSensorExists = 2;
    boolean hasEspSensorExists();
    boolean getEspSensorExists();
    
    // required bool lightSensorExists = 3;
    boolean hasLightSensorExists();
    boolean getLightSensorExists();
    
    // required bool fogLightSensorExists = 4;
    boolean hasFogLightSensorExists();
    boolean getFogLightSensorExists();
    
    // required float fuelFilling = 5;
    boolean hasFuelFilling();
    float getFuelFilling();
    
    // required float fuelConsumption = 6;
    boolean hasFuelConsumption();
    float getFuelConsumption();
    
    // required float maxSpeed = 7;
    boolean hasMaxSpeed();
    float getMaxSpeed();
  }
  public static final class carInitType extends
      com.google.protobuf.GeneratedMessage
      implements carInitTypeOrBuilder {
    // Use carInitType.newBuilder() to construct.
    private carInitType(Builder builder) {
      super(builder);
    }
    private carInitType(boolean noInit) {}
    
    private static final carInitType defaultInstance;
    public static carInitType getDefaultInstance() {
      return defaultInstance;
    }
    
    public carInitType getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.internal_static_PROTO_SUTAPI_carInitType_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.internal_static_PROTO_SUTAPI_carInitType_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required bool absSensorExists = 1;
    public static final int ABSSENSOREXISTS_FIELD_NUMBER = 1;
    private boolean absSensorExists_;
    public boolean hasAbsSensorExists() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public boolean getAbsSensorExists() {
      return absSensorExists_;
    }
    
    // required bool espSensorExists = 2;
    public static final int ESPSENSOREXISTS_FIELD_NUMBER = 2;
    private boolean espSensorExists_;
    public boolean hasEspSensorExists() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public boolean getEspSensorExists() {
      return espSensorExists_;
    }
    
    // required bool lightSensorExists = 3;
    public static final int LIGHTSENSOREXISTS_FIELD_NUMBER = 3;
    private boolean lightSensorExists_;
    public boolean hasLightSensorExists() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public boolean getLightSensorExists() {
      return lightSensorExists_;
    }
    
    // required bool fogLightSensorExists = 4;
    public static final int FOGLIGHTSENSOREXISTS_FIELD_NUMBER = 4;
    private boolean fogLightSensorExists_;
    public boolean hasFogLightSensorExists() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public boolean getFogLightSensorExists() {
      return fogLightSensorExists_;
    }
    
    // required float fuelFilling = 5;
    public static final int FUELFILLING_FIELD_NUMBER = 5;
    private float fuelFilling_;
    public boolean hasFuelFilling() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public float getFuelFilling() {
      return fuelFilling_;
    }
    
    // required float fuelConsumption = 6;
    public static final int FUELCONSUMPTION_FIELD_NUMBER = 6;
    private float fuelConsumption_;
    public boolean hasFuelConsumption() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public float getFuelConsumption() {
      return fuelConsumption_;
    }
    
    // required float maxSpeed = 7;
    public static final int MAXSPEED_FIELD_NUMBER = 7;
    private float maxSpeed_;
    public boolean hasMaxSpeed() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public float getMaxSpeed() {
      return maxSpeed_;
    }
    
    private void initFields() {
      absSensorExists_ = false;
      espSensorExists_ = false;
      lightSensorExists_ = false;
      fogLightSensorExists_ = false;
      fuelFilling_ = 0F;
      fuelConsumption_ = 0F;
      maxSpeed_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasAbsSensorExists()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEspSensorExists()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLightSensorExists()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFogLightSensorExists()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFuelFilling()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFuelConsumption()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaxSpeed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, absSensorExists_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, espSensorExists_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, lightSensorExists_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, fogLightSensorExists_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, fuelFilling_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, fuelConsumption_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, maxSpeed_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, absSensorExists_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, espSensorExists_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, lightSensorExists_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, fogLightSensorExists_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, fuelFilling_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, fuelConsumption_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, maxSpeed_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.internal_static_PROTO_SUTAPI_carInitType_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.internal_static_PROTO_SUTAPI_carInitType_fieldAccessorTable;
      }
      
      // Construct using com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        absSensorExists_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        espSensorExists_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        lightSensorExists_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        fogLightSensorExists_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        fuelFilling_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        fuelConsumption_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        maxSpeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType.getDescriptor();
      }
      
      public com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType getDefaultInstanceForType() {
        return com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType.getDefaultInstance();
      }
      
      public com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType build() {
        com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType buildPartial() {
        com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType result = new com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.absSensorExists_ = absSensorExists_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.espSensorExists_ = espSensorExists_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.lightSensorExists_ = lightSensorExists_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fogLightSensorExists_ = fogLightSensorExists_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.fuelFilling_ = fuelFilling_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.fuelConsumption_ = fuelConsumption_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.maxSpeed_ = maxSpeed_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType) {
          return mergeFrom((com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType other) {
        if (other == com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType.getDefaultInstance()) return this;
        if (other.hasAbsSensorExists()) {
          setAbsSensorExists(other.getAbsSensorExists());
        }
        if (other.hasEspSensorExists()) {
          setEspSensorExists(other.getEspSensorExists());
        }
        if (other.hasLightSensorExists()) {
          setLightSensorExists(other.getLightSensorExists());
        }
        if (other.hasFogLightSensorExists()) {
          setFogLightSensorExists(other.getFogLightSensorExists());
        }
        if (other.hasFuelFilling()) {
          setFuelFilling(other.getFuelFilling());
        }
        if (other.hasFuelConsumption()) {
          setFuelConsumption(other.getFuelConsumption());
        }
        if (other.hasMaxSpeed()) {
          setMaxSpeed(other.getMaxSpeed());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasAbsSensorExists()) {
          
          return false;
        }
        if (!hasEspSensorExists()) {
          
          return false;
        }
        if (!hasLightSensorExists()) {
          
          return false;
        }
        if (!hasFogLightSensorExists()) {
          
          return false;
        }
        if (!hasFuelFilling()) {
          
          return false;
        }
        if (!hasFuelConsumption()) {
          
          return false;
        }
        if (!hasMaxSpeed()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              absSensorExists_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              espSensorExists_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              lightSensorExists_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              fogLightSensorExists_ = input.readBool();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              fuelFilling_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              fuelConsumption_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              maxSpeed_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required bool absSensorExists = 1;
      private boolean absSensorExists_ ;
      public boolean hasAbsSensorExists() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public boolean getAbsSensorExists() {
        return absSensorExists_;
      }
      public Builder setAbsSensorExists(boolean value) {
        bitField0_ |= 0x00000001;
        absSensorExists_ = value;
        onChanged();
        return this;
      }
      public Builder clearAbsSensorExists() {
        bitField0_ = (bitField0_ & ~0x00000001);
        absSensorExists_ = false;
        onChanged();
        return this;
      }
      
      // required bool espSensorExists = 2;
      private boolean espSensorExists_ ;
      public boolean hasEspSensorExists() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public boolean getEspSensorExists() {
        return espSensorExists_;
      }
      public Builder setEspSensorExists(boolean value) {
        bitField0_ |= 0x00000002;
        espSensorExists_ = value;
        onChanged();
        return this;
      }
      public Builder clearEspSensorExists() {
        bitField0_ = (bitField0_ & ~0x00000002);
        espSensorExists_ = false;
        onChanged();
        return this;
      }
      
      // required bool lightSensorExists = 3;
      private boolean lightSensorExists_ ;
      public boolean hasLightSensorExists() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public boolean getLightSensorExists() {
        return lightSensorExists_;
      }
      public Builder setLightSensorExists(boolean value) {
        bitField0_ |= 0x00000004;
        lightSensorExists_ = value;
        onChanged();
        return this;
      }
      public Builder clearLightSensorExists() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lightSensorExists_ = false;
        onChanged();
        return this;
      }
      
      // required bool fogLightSensorExists = 4;
      private boolean fogLightSensorExists_ ;
      public boolean hasFogLightSensorExists() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public boolean getFogLightSensorExists() {
        return fogLightSensorExists_;
      }
      public Builder setFogLightSensorExists(boolean value) {
        bitField0_ |= 0x00000008;
        fogLightSensorExists_ = value;
        onChanged();
        return this;
      }
      public Builder clearFogLightSensorExists() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fogLightSensorExists_ = false;
        onChanged();
        return this;
      }
      
      // required float fuelFilling = 5;
      private float fuelFilling_ ;
      public boolean hasFuelFilling() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public float getFuelFilling() {
        return fuelFilling_;
      }
      public Builder setFuelFilling(float value) {
        bitField0_ |= 0x00000010;
        fuelFilling_ = value;
        onChanged();
        return this;
      }
      public Builder clearFuelFilling() {
        bitField0_ = (bitField0_ & ~0x00000010);
        fuelFilling_ = 0F;
        onChanged();
        return this;
      }
      
      // required float fuelConsumption = 6;
      private float fuelConsumption_ ;
      public boolean hasFuelConsumption() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public float getFuelConsumption() {
        return fuelConsumption_;
      }
      public Builder setFuelConsumption(float value) {
        bitField0_ |= 0x00000020;
        fuelConsumption_ = value;
        onChanged();
        return this;
      }
      public Builder clearFuelConsumption() {
        bitField0_ = (bitField0_ & ~0x00000020);
        fuelConsumption_ = 0F;
        onChanged();
        return this;
      }
      
      // required float maxSpeed = 7;
      private float maxSpeed_ ;
      public boolean hasMaxSpeed() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public float getMaxSpeed() {
        return maxSpeed_;
      }
      public Builder setMaxSpeed(float value) {
        bitField0_ |= 0x00000040;
        maxSpeed_ = value;
        onChanged();
        return this;
      }
      public Builder clearMaxSpeed() {
        bitField0_ = (bitField0_ & ~0x00000040);
        maxSpeed_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:PROTO_SUTAPI.carInitType)
    }
    
    static {
      defaultInstance = new carInitType(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:PROTO_SUTAPI.carInitType)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_PROTO_SUTAPI_carInitType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_PROTO_SUTAPI_carInitType_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022PROTO_SUTAPI.proto\022\014PROTO_SUTAPI\"\270\001\n\013c" +
      "arInitType\022\027\n\017absSensorExists\030\001 \002(\010\022\027\n\017e" +
      "spSensorExists\030\002 \002(\010\022\031\n\021lightSensorExist" +
      "s\030\003 \002(\010\022\034\n\024fogLightSensorExists\030\004 \002(\010\022\023\n" +
      "\013fuelFilling\030\005 \002(\002\022\027\n\017fuelConsumption\030\006 " +
      "\002(\002\022\020\n\010maxSpeed\030\007 \002(\002B=\n*com.testingtech" +
      ".ttworkbench.play.generatedB\014PROTO_SUTAP" +
      "I\210\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_PROTO_SUTAPI_carInitType_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_PROTO_SUTAPI_carInitType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_PROTO_SUTAPI_carInitType_descriptor,
              new java.lang.String[] { "AbsSensorExists", "EspSensorExists", "LightSensorExists", "FogLightSensorExists", "FuelFilling", "FuelConsumption", "MaxSpeed", },
              com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType.class,
              com.testingtech.ttworkbench.play.generated.PROTO_SUTAPI.carInitType.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
