module SUT_TEST {
    import from ACTIONS_API all;
	import from Parameters all;
    import from CONFIG_API all;
    import from PROTO_API language "PROTO" all;
    import from HANDLE_API all;
    import from TTlibrary all;
    
    type port PROTO_ACTIONS_widgetPort procedure {
        out PROTO_API.ACTIONS__API_onOffEngineType
        , PROTO_API.ACTIONS__API_speedType
        , PROTO_API.ACTIONS__API_trackType
        , PROTO_API.ACTIONS__API_warningType
        , PROTO_API.ACTIONS__API_carInitType
        , PROTO_API.ACTIONS__API_widgetExit
        ;
    }

    type port PROTO_EVENTS_widgetPort procedure {
        in PROTO_API.EVENTS__API_carStatusType;
    }

    type component TEST_WIDGET_COMPONENT {
        port PROTO_ACTIONS_widgetPort ACTIONS_PORT_widgetPort;
        port PROTO_EVENTS_widgetPort EVENTS_PORT_widgetPort;
    }
    
    type port PROTO_carEventsPort procedure {
        out PROTO_API.EVENTS__API_carStatusType;
    }
    
    type port PROTO_carActionsPort procedure {
        in PROTO_API.ACTIONS__API_onOffEngineType,
        PROTO_API.ACTIONS__API_speedType,
        PROTO_API.ACTIONS__API_trackType,
        PROTO_API.ACTIONS__API_warningType,
        PROTO_API.ACTIONS__API_carInitType,
        PROTO_API.ACTIONS__API_widgetExit;
    }

    type component TEST_CAR_COMPONENT {
        port PROTO_carActionsPort carActionsPort;
        port PROTO_carEventsPort carEventsPort;
    }
      
    type component comp1 extends COMPONENT {
        var TEST_WIDGET_COMPONENT testWidgetComp;

        var TEST_CAR_COMPONENT testCarComp;
    }
    
    function PREAMBLE() runs on comp1 {
        testWidgetComp := TEST_WIDGET_COMPONENT.create;
        testCarComp := TEST_CAR_COMPONENT.create;
        
        connect(mtc:ACTIONS_PORT_widgetPort, testWidgetComp:ACTIONS_PORT_widgetPort);
        connect(mtc:EVENTS_PORT_widgetPort, testWidgetComp:EVENTS_PORT_widgetPort);

        connect(mtc:carActions, testCarComp:carActionsPort);
        connect(mtc:carEvents, testCarComp:carEventsPort);
        
        testWidgetComp.start(widgetSim());
        testCarComp.start(carSim());
        
        activate(handleTimeout());
        activate(handleCarEvents());
    }

    template ACTIONS__API_carInitType carInitTemplate := {
        p_carInitType := {
            ttcnEventsHostName := TTlibrary_Net.hostAddress("localhost"),
            ttcnEventsPort := EVENTS_CAR_TCP_PORT,
            absSensorExists := true,
            espSensorExists := false,
            lightSensorExists := true,
            fogLightSensorExists := false,
            fuelFilling := 0.5,
            fuelConsumption := 10.6,
            maxSpeed := 250.0,
            unknown_ := omit
        }
    }

    template EVENTS__API_carStatusType carStatusTemplate := {
        p_carStatusType := {
            carId := 1,
            engineStatus := true,
            speed := 50.0,
            absSensor := true,
            espSensor := false,
            lightSensor := false,
            fogLightSensor := false,
            fuelFilling := 0.3,
            gpsPos := {latitude := 1.0, longitude := 1.0, unknown_ := omit},
            warning := {
                warningName := {enum_value := deer, unknown_ := omit},
                gpsPos := {latitude := 5.0, longitude := 1.0, unknown_ := omit},
                priority := 3,
                unknown_ := omit
            },
            unknown_ := omit
        }
    }

    function widgetSim() runs on TEST_WIDGET_COMPONENT {
        // Send initial car values.
        ACTIONS_PORT_widgetPort.call(carInitTemplate, nowait);
        ACTIONS_PORT_widgetPort.getreply;
        // Get status type from SUT.
        EVENTS_PORT_widgetPort.getcall(EVENTS__API_carStatusType:{?});
        EVENTS_PORT_widgetPort.reply(EVENTS__API_carStatusType:{-} value {});
        // Send message to start engine.
        ACTIONS_PORT_widgetPort.call(ACTIONS__API_onOffEngineType:{ {1, true} }, nowait);
        ACTIONS_PORT_widgetPort.getreply;
        
        ACTIONS_PORT_widgetPort.call(ACTIONS__API_widgetExit:{ {1} }, nowait);
        ACTIONS_PORT_widgetPort.getreply;
    }
    
    function carSim() runs on TEST_CAR_COMPONENT {
        // Get initial car values.
        carActionsPort.getcall(carInitTemplate);
        carActionsPort.reply(ACTIONS__API_carInitType:{-} value {});
        // Send status type from SUT.
        carEventsPort.call(carStatusTemplate, nowait);
        carEventsPort.getreply;
        // Get message to start engine.
        carActionsPort.getcall(ACTIONS__API_onOffEngineType:?);
        carActionsPort.reply(ACTIONS__API_onOffEngineType:{-} value {});
    }
	
	
    function POSTAMBLE() runs on comp1 {
        disconnect(mtc:ACTIONS_PORT_widgetPort, testWidgetComp:ACTIONS_PORT_widgetPort);
        disconnect(mtc:EVENTS_PORT_widgetPort, testWidgetComp:EVENTS_PORT_widgetPort);

        disconnect(mtc:carActions, testCarComp:carActionsPort);
        disconnect(mtc:carEvents, testCarComp:carEventsPort);
        deactivate;
    }
    
    testcase TESTCASE() runs on comp1 system COMPONENT {
        PREAMBLE();
        while (not widgetExit) {
            handleAction();
        }
        POSTAMBLE();
    }
}