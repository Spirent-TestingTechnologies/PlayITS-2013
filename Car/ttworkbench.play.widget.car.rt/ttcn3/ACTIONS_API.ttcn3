// generated by ProtoGenerator at Tue Feb 26 12:30:28 CET 2013
// use as template for merging with implementation
module ACTIONS_API {
    import from PROTO_API language "PROTO" all;
    import from CONVERT_API all;
    import from API all;
    import from CONFIG_API all;

    function ACTION_API__onOffEngineType(API.onOffEngineType p_value) runs on COMPONENT {
        calltimer.start;
        car.call(ACTIONS__API_onOffEngineType:{toProto_onOffEngineType(p_value)}, nowait);

        log("ACTION_API__onOffEngineType was called by the widget");
    }

    function ACTION_API__speedType(API.speedType p_value) runs on COMPONENT {
        calltimer.start;
        car.call(ACTIONS__API_speedType:{toProto_speedType(p_value)}, nowait);
        
        log("ACTION_API__speedType was called by the widget");
    }

    function ACTION_API__trackType(API.trackType p_value) runs on COMPONENT {
        calltimer.start;
        car.call(ACTIONS__API_trackType:{toProto_trackType(p_value)}, nowait);
        
        log("ACTION_API__trackType was called by the widget");
    }

    function ACTION_API__warningType(API.warningType p_value) runs on COMPONENT {
        calltimer.start;
        car.call(ACTIONS__API_warningType:{toProto_warningType(p_value)}, nowait);
        
        log("ACTION_API__warningType was called by the widget");
    }
    
    function ACTION_API__carInitType(API.carInitType p_value) runs on COMPONENT {
        calltimer.start;
        car.call(ACTIONS__API_carInitType:{toProto_carInitType(p_value)}, nowait);
        log("ACTION_API__carInitType was called by the widget");
    }

    altstep handleCarEvents() runs on COMPONENT {
        var PROTO_API.carStatusType status;
        [] car.getcall (EVENTS__API_carStatusType:{?}) -> param (status){
            calltimer.start;
            EVENTS_PORT_widgetPort.call(EVENTS__API_carStatusType:{status}, nowait);
            car.reply (EVENTS__API_carStatusType:{-} value {}) ;
        }
    }

    altstep handleTimeout () runs on COMPONENT {
        [] car.getreply {}
        [] calltimer.timeout {
            setverdict(fail);
        }
    }

    function PREAMBLE() runs on COMPONENT {
        map(mtc:ACTIONS_PORT_widgetPort, system:ACTIONS_PORT_widgetPort);
        map(mtc:EVENTS_PORT_widgetPort, system:EVENTS_PORT_widgetPort);
        activate(handleTimeout());
        activate(handleCarEvents());
    }

    function POSTAMBLE() runs on COMPONENT {
        unmap(mtc:ACTIONS_PORT_widgetPort, system:ACTIONS_PORT_widgetPort);
        unmap(mtc:EVENTS_PORT_widgetPort, system:EVENTS_PORT_widgetPort);
        deactivate;
    }
}